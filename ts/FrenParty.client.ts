/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.35.3.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

import { CosmWasmClient, SigningCosmWasmClient, ExecuteResult } from "@cosmjs/cosmwasm-stargate";
import { StdFee } from "@cosmjs/amino";
import { Decimal, InstantiateMsg, ExecuteMsg, Uint128, QueryMsg, Coin, Addr, Config } from "./FrenParty.types";
export interface FrenPartyReadOnlyInterface {
  contractAddress: string;
  config: () => Promise<Config>;
  sharesBalance: ({
    holder,
    subject
  }: {
    holder: string;
    subject: string;
  }) => Promise<Uint128>;
  sharesSupply: ({
    subject
  }: {
    subject: string;
  }) => Promise<Uint128>;
  buyPrice: ({
    amount,
    subject
  }: {
    amount: Uint128;
    subject: string;
  }) => Promise<Coin>;
  sellPrice: ({
    amount,
    subject
  }: {
    amount: Uint128;
    subject: string;
  }) => Promise<Coin>;
  buyPriceAfterFee: ({
    amount,
    subject
  }: {
    amount: Uint128;
    subject: string;
  }) => Promise<Coin>;
  sellPriceAfterFee: ({
    amount,
    subject
  }: {
    amount: Uint128;
    subject: string;
  }) => Promise<Coin>;
}
export class FrenPartyQueryClient implements FrenPartyReadOnlyInterface {
  client: CosmWasmClient;
  contractAddress: string;

  constructor(client: CosmWasmClient, contractAddress: string) {
    this.client = client;
    this.contractAddress = contractAddress;
    this.config = this.config.bind(this);
    this.sharesBalance = this.sharesBalance.bind(this);
    this.sharesSupply = this.sharesSupply.bind(this);
    this.buyPrice = this.buyPrice.bind(this);
    this.sellPrice = this.sellPrice.bind(this);
    this.buyPriceAfterFee = this.buyPriceAfterFee.bind(this);
    this.sellPriceAfterFee = this.sellPriceAfterFee.bind(this);
  }

  config = async (): Promise<Config> => {
    return this.client.queryContractSmart(this.contractAddress, {
      config: {}
    });
  };
  sharesBalance = async ({
    holder,
    subject
  }: {
    holder: string;
    subject: string;
  }): Promise<Uint128> => {
    return this.client.queryContractSmart(this.contractAddress, {
      shares_balance: {
        holder,
        subject
      }
    });
  };
  sharesSupply = async ({
    subject
  }: {
    subject: string;
  }): Promise<Uint128> => {
    return this.client.queryContractSmart(this.contractAddress, {
      shares_supply: {
        subject
      }
    });
  };
  buyPrice = async ({
    amount,
    subject
  }: {
    amount: Uint128;
    subject: string;
  }): Promise<Coin> => {
    return this.client.queryContractSmart(this.contractAddress, {
      buy_price: {
        amount,
        subject
      }
    });
  };
  sellPrice = async ({
    amount,
    subject
  }: {
    amount: Uint128;
    subject: string;
  }): Promise<Coin> => {
    return this.client.queryContractSmart(this.contractAddress, {
      sell_price: {
        amount,
        subject
      }
    });
  };
  buyPriceAfterFee = async ({
    amount,
    subject
  }: {
    amount: Uint128;
    subject: string;
  }): Promise<Coin> => {
    return this.client.queryContractSmart(this.contractAddress, {
      buy_price_after_fee: {
        amount,
        subject
      }
    });
  };
  sellPriceAfterFee = async ({
    amount,
    subject
  }: {
    amount: Uint128;
    subject: string;
  }): Promise<Coin> => {
    return this.client.queryContractSmart(this.contractAddress, {
      sell_price_after_fee: {
        amount,
        subject
      }
    });
  };
}
export interface FrenPartyInterface extends FrenPartyReadOnlyInterface {
  contractAddress: string;
  sender: string;
  buyShares: ({
    amount,
    subject
  }: {
    amount: Uint128;
    subject: string;
  }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  sellShares: ({
    amount,
    subject
  }: {
    amount: Uint128;
    subject: string;
  }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
}
export class FrenPartyClient extends FrenPartyQueryClient implements FrenPartyInterface {
  client: SigningCosmWasmClient;
  sender: string;
  contractAddress: string;

  constructor(client: SigningCosmWasmClient, sender: string, contractAddress: string) {
    super(client, contractAddress);
    this.client = client;
    this.sender = sender;
    this.contractAddress = contractAddress;
    this.buyShares = this.buyShares.bind(this);
    this.sellShares = this.sellShares.bind(this);
  }

  buyShares = async ({
    amount,
    subject
  }: {
    amount: Uint128;
    subject: string;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      buy_shares: {
        amount,
        subject
      }
    }, fee, memo, _funds);
  };
  sellShares = async ({
    amount,
    subject
  }: {
    amount: Uint128;
    subject: string;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      sell_shares: {
        amount,
        subject
      }
    }, fee, memo, _funds);
  };
}